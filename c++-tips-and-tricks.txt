-Namespaces-
Generally it's good practice to avoid "using namespace std;" as you can
have name collisions with things in the standard library and the code you write,
and its not much extra typing to add "std::" in front of things from the standard library.

-C++ String class-
C++'s string class is very easy to use, to make a string do something like this:
"std::string myString = "My String";"

To go through the string you can do the same thing you would do with a c-string (char array),
using [] to index it like so:
"myString[0] = 'm'; // changes myString to "my String""

To loop through it you can get the length of the string with the length() method, for example:
"for (int i = 0; i < myString.length(); i++)
	 myString[i] = 'a'; // change all letters to a"

You can also use the at() method to index through strings, which will throw an exception if you go outside the string bounds, for example:
"char z = myString.at(100); // will throw an exception"

You can learn more here: https://en.cppreference.com/w/cpp/string/basic_string with most of the important things being in the member functions section

-STL Set/Binary Tree-
C++ has a binary tree in the STL (standard template library) called set

It is in the map header, so to include it do "#include <set>"

Making a set looks like this:
"std::set<typename> mySet"
where "typename" is the type of thing you want to store in the set,
for example a set of ints would be "std::set<int> myInts"

To add to the set use the insert() method like so:
"mySet.insert(something);"

To traverse the set you can use an iterator (basically a pointer),
the begin() method gives you an iterator to the begininng of the set, and end() to the end.
To loop through the set in order you could do this:
"for (std::set<typename>::iterator it = mySet.begin(); it != mySet.end(); it++)
	 doSomething(*it);"

If you want to avoid typing out the whole type for iterators you can use the auto
type added in C++11 which will determine the type for you so
a loop to print a set might be like this:
"for (auto it = mySet.begin(); it != mySet.end(); it++)
	 std::cout << *it;"

The set is sorted based on the < operator, so to store things of a class you make
you need to overload the < operator, which I'll demonstrate using the following simple example class:

"Class Example {
 public:
	Example(int start)
	{
		exampleInt = start;
	}
	friend bool operator<(const Example& lhs, const Example& rhs);
 private:
	int exampleInt;
};"

Notice the friend declaration of operator<, this is needed to let operator<
access private data.

Then the actual operator overload is put outside of the classes namespace
"bool operator<(const Example& lhs, const Example& rhs)
{
	return lhs.exampleInt < rhs.exampleInt;
}"

This makes it so Example objects are compared based on who has a lower value
in exampleInt

Now Example objects can be stored in a set like so:
"std::set<Example> myExamples"
	   
You can learn more here: https://en.cppreference.com/w/cpp/container/set
